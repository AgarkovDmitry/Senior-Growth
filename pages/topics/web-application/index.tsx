import Head from 'next/head'

import { Space, Typography, Collapse, List, Divider } from 'antd'

import Layout from 'components/Layout/Layout'

import styles from '../Topic.module.css'

const defaultOpenedSections = ['spa', 'ssr', 'pwa', 'css', 'repo', 'framework']

export default function WebApplication() {
  return (
    <Layout>
      <Head>
        <title>Web Application Design and Framework</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <Space direction='vertical' className={styles.rootCard}>
          <Typography.Title level={3}>
            Web Application Design and Framework
          </Typography.Title>
          <Collapse bordered={true} defaultActiveKey={defaultOpenedSections}>
            <Collapse.Panel header='SPA and MPA' key='spa'>
              <Typography.Text>
                SPA is a relatively new approach compared to MPA, the idea
                behind is to reuse already loaded content and load only required
                data. In MPA, the client has to load the entire page all the
                time it navigates somewhere, in SPA we are loading at first the
                skeleton of our app and then only loading data.
              </Typography.Text>
              <Divider orientation='left' dashed={true}>
                Cons
              </Divider>
              <List bordered={true}>
                <List.Item>
                  1. Provides better user experience, user do not reload whole
                  page
                </List.Item>
                <List.Item>
                  2. Frontend is less bound to the backend. There is a less
                  dependency between them
                </List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Pros
              </Divider>
              <List bordered={true}>
                <List.Item>1. Hard SEO, requires extra efforts(SSR)</List.Item>
              </List>
            </Collapse.Panel>
            <Collapse.Panel header='SSR and CSR' key='ssr'>
              <Typography.Text>
                SSR is the next level of web application. Initially all frontend
                applications were rendered on client side (CSR), but then we
                encountered SEO issues and longer time-to-first-interaction(due
                to larger initial load). In order to solve it SSR was created,
                where the server is responsible for rendering the initial page
                and sending it to the client.
              </Typography.Text>
              <Divider orientation='left' dashed={true}>
                Cons
              </Divider>
              <List bordered={true}>
                <List.Item>1. SEO</List.Item>
                <List.Item>2. Time-to-first-interaction</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Pros
              </Divider>
              <List bordered={true}>
                <List.Item>
                  1. Initially there was no common approach, so we might have
                  support issues.
                </List.Item>
                <List.Item>2. SSR requires extra backend resources.</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Backend resources optimizations{' '}
              </Divider>
              <List bordered={true}>
                <List.Item>1. Cache rendered page</List.Item>
                <List.Item>
                  2. Only use SSR for specific pages(prioritise)
                </List.Item>
                <List.Item>3. We may skip SSR for some users</List.Item>
              </List>
            </Collapse.Panel>
            <Collapse.Panel header='PWA' key='pwa'>
              <Typography.Text>
                This is a hybrid between Web-Application and Native-Application.
                It uses Service Worker and works offline in case of a missing
                network.
              </Typography.Text>
              <Divider orientation='left' dashed={true}>
                Use cases
              </Divider>
              <List bordered={true}>
                <List.Item>1. Push-notifications</List.Item>
                <List.Item>2. Access to bought products/tickets etc.</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Cons compared to Native
              </Divider>
              <List bordered={true}>
                <List.Item>1. Limited feature-list</List.Item>
                <List.Item>2. Higher battery usage</List.Item>
              </List>
            </Collapse.Panel>
            <Collapse.Panel header='CSS methodologies' key='css'>
              <Collapse bordered={false}>
                <Collapse.Panel header='BEM' key='bem'>
                  BEM fixes the two biggest problems with plain old CSS
                  Inheritance and Specificity
                  <List bordered={true}>
                    <List.Item>1. Better HTML/CSS decoupling</List.Item>
                    <List.Item>2. No CSS conflicts</List.Item>
                    <List.Item>3. Easy to maintain</List.Item>
                    <List.Item>4. Long css names</List.Item>
                  </List>
                </Collapse.Panel>
                <Collapse.Panel header='OOCSS' key='oocss'>
                  Class name is based on object responsibilities
                  <List bordered={true}>
                    <List.Item>1. Easy to start</List.Item>
                    <List.Item>2. CSS conflicts</List.Item>
                  </List>
                </Collapse.Panel>
                <Collapse.Panel header='SMACSS' key='smacss'>
                  Similar to OOCSS but it's suggests using nesting, and have
                  less classname
                  <List bordered={true}>
                    <List.Item>1. Less css entries in code</List.Item>
                    <List.Item>2. Nesting</List.Item>
                  </List>
                </Collapse.Panel>
                <Collapse.Panel header='Atomic CSS' key='atomic'>
                  Each class name corresponds to a specific style property, and
                  we just gather needed class names. e.g. Bootstrap
                  <List bordered={true}>
                    <List.Item>1. Easy to start</List.Item>
                    <List.Item>2. Hard to scale</List.Item>
                  </List>
                </Collapse.Panel>
                <Collapse.Panel header='CSS-in-JS' key='css-in-js'>
                  <List bordered={true}>
                    <List.Item>1. All styles in one place(theming)</List.Item>
                    <List.Item>2. Atomicity</List.Item>
                    <List.Item>3. Laggy</List.Item>
                    <List.Item>4. Harder debugging</List.Item>
                  </List>
                </Collapse.Panel>
                <Collapse.Panel header='CSS modules' key='css-modules'>
                  <List bordered={true}>
                    <List.Item>1. No nesting</List.Item>
                    <List.Item>2. Simple css</List.Item>
                    <List.Item>2. No CSS conflicts</List.Item>
                  </List>
                </Collapse.Panel>
              </Collapse>
            </Collapse.Panel>
            <Collapse.Panel header='Monorepos and microfrontends' key='repo'>
              <Typography.Text>
                The idea behind microfrontends comes from backend micro services
                and has simillar pros/cons
              </Typography.Text>
              <Divider orientation='left' dashed={true}>
                Monorepos
              </Divider>
              <List bordered={true}>
                <List.Item>Easier to develop</List.Item>
                <List.Item>Easier to make change to whole project</List.Item>
                <List.Item>Easier dependency management</List.Item>
                <List.Item>Reusing featched data caching</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Microfrontends
              </Divider>
              <List bordered={true}>
                <List.Item>Faster CI/CD</List.Item>
                <List.Item>Better code management</List.Item>
              </List>
            </Collapse.Panel>
            <Collapse.Panel
              header='How to choose the next project framework?'
              key='framework'
            >
              <Divider orientation='left' dashed={true}>
                Library
              </Divider>
              <List bordered={true}>
                <List.Item>1. Maturity</List.Item>
                <List.Item>2. Inverse Compatibility</List.Item>
                <List.Item>3. Documentation</List.Item>
                <List.Item>4. Community</List.Item>
                <List.Item>5. Bundle Size</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Team
              </Divider>
              <List bordered={true}>
                <List.Item>1. Team preferences</List.Item>
                <List.Item>2. Team experience</List.Item>
                <List.Item>3. Learning Curve</List.Item>
              </List>
              <Divider orientation='left' dashed={true}>
                Customer
              </Divider>
              <List bordered={true}>
                <List.Item>1. Customer preferences</List.Item>
                <List.Item>2. Time</List.Item>
                <List.Item>3. Budget</List.Item>
                <List.Item>4. Size</List.Item>
              </List>
            </Collapse.Panel>
          </Collapse>
        </Space>
      </main>
    </Layout>
  )
}
